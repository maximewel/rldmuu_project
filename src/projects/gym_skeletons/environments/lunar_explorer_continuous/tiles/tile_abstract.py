from abc import ABC, abstractmethod
from typing import Tuple

from .tiletype import TileType
from actions import Actions

class AbstractTile(ABC):
    tileType: TileType

    @abstractmethod
    def execute(self, action: Actions, speed: Tuple[float, float]) -> Tuple[float, float, bool, float]:
        """
        Execute the given action over the tile.

        Args:
            Action - The action to take


        Returns:
            Tuple:
                float: new_x, the new X offset position
                float: new_y, the new Y offset position
                bool: Wheter the simulation is done
                float: The reward that the action generated by its execution on the tile
        """
        raise NotImplementedError(f"Tile {self.tileType} has not implemented execute method")

    def has_mineral(self) -> bool:
        """Used to return whether this tile can be drilled (has minerals)"""
        return False
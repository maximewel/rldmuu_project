from abc import ABC, abstractmethod
from typing import Tuple

from .tiletype import TileType
from actions import Actions

class AbstractTile(ABC):
    tileType: TileType

    @abstractmethod
    def execute(self, action: Actions, speed: Tuple[int, int]) -> Tuple[int, int, bool, float]:
        """
        Execute the given action over the tile.

        Args:
            Action - The action to take


        Returns:
            Tuple:
                int: new_x, the new X offset position
                int: new_y, the new Y offset position
                bool: Wheter the simulation is done
                float: The reward that the action generated by its execution on the tile
        """
        raise NotImplementedError(f"Tile {self.tileType} has not implemented execute method")